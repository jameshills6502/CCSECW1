@page "/login"

@using Data
@using BlazorServer.Models
@using Microsoft.Extensions.Configuration
@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login</PageTitle>
<h3>Login Page</h3>
<EditForm Model="@User" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="User.Email"/>
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="User.Password"/>
    </div>
    <button type="submit" class="btn btn-primary">Log In</button>
    <button class="btn btn-primary">Register</button>
</EditForm>

@code {
    List<UserModel> checkusers;
    private UserModel User = new();
    private async Task HandleValidSubmit()
    {
        string CheckEmail = User.Email;
        string CheckPassword = User.Password;
        string sql = "select * from User_Accounts where User_Email = @User.Email and User_Password = User.Password";
        checkusers = await _data.LoadData<UserModel, dynamic>(sql, new { User_Email = CheckEmail, User_Password = CheckPassword}, _config.GetConnectionString("default"));
        if(checkusers == null)
        {
            //output account not valid
            Console.WriteLine("Failed to find");
        }
        else
        {
            //set login value to user id, display this user info on account page
            Console.WriteLine("Successful find");
        }
    }
    @*await LocalStorage.SetItemAsync<string>("username", User.Email);
    await AuthStateProvider.GetAuthenticationStateAsync();
    NavigationManager.NavigateTo("");
    Logger.LogInformation("HandleSubmit called");
    var response = await HttpClient.PostAsJsonAsync("", );
    var newUserId = await response.Content.ReadFromJsonAsync<int>*@
}
